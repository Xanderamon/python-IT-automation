#!/usr/bin/env python3

import json
import locale
import sys
import os
import operator
import reports
import emails


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximum revenue (units sold * price),
  item with maximum sales and most popular manufacturing year.

  Returns a list of lines that summarize the information.
  """
  locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
  max_revenue = {"revenue": 0}
  max_sales = {"total_sales": 0}
  year_popularity = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # Calculate the sales generated by this model
    if item["total_sales"] > max_sales["total_sales"]:
      max_sales = item
    # Populate the year_popularity dictionary
    year = item["car"]["car_year"]
    year_popularity[year] = year_popularity.get(year, 0) + item["total_sales"]
  #Calculate the most popular year
  most_popular_year = max( year_popularity.items(), key=operator.itemgetter(1) )

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {} units".format(
      format_car(max_sales["car"]), max_sales["total_sales"]),
    "The most popular manufacturing year was {} with {} units sold".format(
      most_popular_year[0], most_popular_year[1])
  ]
  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in sorted(car_data, key=operator.itemgetter("total_sales"), reverse=True):
    table_data.append([item["id"], format_car(item["car"]), locale.atof(item["price"].strip("$")), item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  
  # Unpack sys.argv and set default values
  data_path = dict(enumerate(argv)).get(1, "car_sales.json")
  report_path = dict(enumerate(argv)).get(2, "sales_report.pdf")
  sender = dict(enumerate(argv)).get(3, "automation@example.com")
  recipient = dict(enumerate(argv)).get(4, "{}@example.com".format(os.environ.get('USER')))
  
  # Process data and produce a summary
  data = load_data(data_path)
  summary = process_data(data)
  print(summary)
  
  # Turn processed data into a PDF report
  reports.generate(report_path, "Monthly Sales Report", "<br/>".join(summary), cars_dict_to_table(data))
  print("Report generated on location: {}".format(report_path))
  
  # Send the PDF report as an email attachment
  print("Sending email...")
  message = emails.generate( sender, recipient, "Sales summary for last month", "\n".join(summary), report_path)
  emails.send(message)
  print("Successfully sent report email from {} to {} with {} attachment".format(sender,recipient,report_path))


if __name__ == "__main__":
  main(sys.argv)


